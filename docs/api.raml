#%RAML 0.8
title: Ticklr API 
version: v1
baseUri: http://localhost:8080/api/
protocols: [HTTP, HTTPS]
mediaType: application/json

traits:
  - authorized:
      headers:
        Authorization:
          description: Authentication information (JWT Token)
          example: "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
      responses:
        401:
          description: User cannot be authenticated due to invalid authentication information.
        403:
          description: User does not have permissions to access this resource.

  - auth_endpoint:
      description: User acquires Authentication Token by providing valid credentials (correct email and password).
      body:
        application/json:
          example: |
            {
              "email"    : "user@example.com",
              "password" : "123456789"
            }
      responses:
        200:
          description: Authentication succeeds, Authentication Token is returned to user.
          body:
            application/json:
              example: |
                {
                  "token": "eyJ0eXQiLCJhbGcAiO1IUzI1iJKViOiJNiJ9.eyJlldUBnbWFpbC5zdWIiOiJuZ25taGjb20iLCJleHAiOjE0NjE4ODA4MDB9.ZmddFiD4vB9p0cWL6ahbaqLbLLGTXTjbJwH5QmbS2YL",
                  "user": {
                    "href": "http://localhost/api/users/27a4563a45ab4a7aacd15af9"
                  },
                  "buyer": {
                    "href": "http://localhost/api/buyers/4935a156cd427a4aa75afaab"
                  }
                }
        401:
          description: User cannot be authenticated due to incorrect credentials, please try again.

  - has_validation_error:
      responses:
        400:
          description: There are validation errors.
          body:
            application/json:
              example: |
                {
                  "errorCode": "VALIDATION_ERROR"
                }
  - has_resource_not_found:
      responses:
        404:
          description: Resource not found.
  - expandable   :
      queryParameters:
        expand:
          description: This specifies which nested resource to be expanded in the response.
          required: false
          type: string
          example: |
            If resource B is nested in resource A under attribute `attrB`.
            When `expand` is not specified when GETing a resource A, the response will look like this:
              {
                "id": "id of resource A",
                "href": "location of resource A"
                "someMoreAttribute": "...."
                "attrB": { // details of resource B is not expanded, only the location is returned
                  "id": "id of resource B",
                  "href": "location of resource B"
                }
              }
            When the query parameter is "expand=attrB", then the response will look like this:
              {
                "id": "id of resource A",
                "href": "location of resource A"
                "someMoreAttribute": "...."
                "attrB": { // details of resource B is not expanded, only the location is returned
                  "id": "id of resource B",
                  "href": "location of resource B",
                  "attribute1": "....",
                  "attribute2": "....",
                  "attribute3": "...."
                }
              }


/users:
  post:
    is: [has_validation_error]
    description: Creates a new user
    body:
      application/json:
        example: |
          {
            "email"    : "user@example.com",
            "password" : "123456789"
          }
    responses:
      201:
        description: User successfully registered.
        headers:
          Location:
            description: Location of the newly created user
            example: "Location: http://localhost/api/users/27a4563a45ab4a7aacd15af9"
        body:
          application/json:
            example: |
              {
                "auth": {
                  "href": "http://localhost/api/auth/request-token"
                }
              }

      409:
        description: There is a conflict due to duplicated email.

  /{userId}:
    is: [authorized, has_resource_not_found]
    uriParameters:
      userId:
        description: UUID that uniquely identifies a user in the system.
        type: string
    get:
      description: Returns a user. 
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "103d34a8-1420-74e9-153d-7a35e1ea8619",
                  "href": "http://example.com/api/users/103d34a8-1420-74e9-153d-7a35e1ea8619",
                  "email": "user@example.com",
                  "events": {
                    "href": "http://localhost:8080/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events"
                  }
                }
    /events:
      is: [authorized, has_resource_not_found]
      get:
        is: [expandable]
        description: Returns all events belonging to the user.
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "href": "http://localhost:8080/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events",
                    "items": [
                      {
                        "id": 1,
                        "href": "http://localhost:8080/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/1",
                      },
                      {
                        "id": 2,
                        "href": "http://localhost:8080/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/2",
                      }
                    ]
                  }
      post:
        is: [has_validation_error]
        description: Creates a new event.
        body:
          application/json:
            example: |
              {
                # TODO rewrite tests
                "title": "BBQ in der Stadtspark",
                "description": "Dolor rem voluptatem nesciunt ducimus quod atque nam!",
                "startTime": "2016-05-14T00:00:00+02:00",
                "endTime": "2016-05-14T01:00:00+02:00",
                "public": true,
                "canceled": false
              }
        responses:
          201:
            description: Event created.
            headers:
              Location:
                example: "Location: http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/14"
      /{eventId}:
        is: [authorized, has_resource_not_found]
        get:
          is: [expandable]
          description: Returns an event.
          responses:
            200:
              body:
                application/json:
                  example: |
                    {
                      "href": "http://localhost/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/123",
                      "id": 1,
                      "title": "New Event",
                      "description": "",
                      "startTime": "2016-05-14T00:00:00+02:00",
                      "endTime": "2016-05-14T01:00:00+02:00",
                      "isPublic": true,
                      "canceled": false,
                      "ticketSets": {
                        "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/14/ticket-sets"
                        "items": [
                          {
                            "id": 2,
                            "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/14/ticket-sets/2"
                            "title": "5er group ticket for a team",
                            "price": 25.00,
                            "stock": 20,
                            "event": {
                              "id": 14,
                              "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/14"
                            }
                          },
                          {
                            "id": 3,
                            "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/14/ticket-sets/3"
                            "title": "1er ticket",
                            "price": 5.00,
                            "stock": 20,
                            "event": {
                              "id": 14,
                              "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/14"
                            }
                          }
                        ]
                      },
                      "expired": false,
                      "happening": false
                    }
        put:
          is: [has_validation_error]
          description: Updates an event.
          body:
            application/json:
              example: |
                {
                  "title": "Event Sample Title",
                  "description": "Sample Description",
                  "startTime": "2016-05-14T00:00:00.000Z",
                  "endTime": "2016-05-14T01:00:00+02:00.000Z",
                  "visibility": "PUBLIC",
                  "canceled": false
                }
          responses:
            204:
              description: Event has been successfully updated.
        delete:
          description: Cancels an event.
          responses:
            204:
              description: Event has been successfully cancelled.

        /ticket-sets:
          is: [authorized, has_resource_not_found]
          get:
            is: [expandable]
            description: Ticket-sets collection of an event.
            responses:
              200:
                body:
                  application/json:
                    example: |
                      {
                        "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/14/ticket-sets"
                        "items": [
                          {
                            "id": 2,
                            "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/14/ticket-sets/2"
                            "title": "5er group ticket for a team",
                            "price": 25.00,
                            "stock": 20,
                            "event": {
                              "id": 14,
                              "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/14"
                            }
                          },
                          {
                            "id": 3,
                            "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/14/ticket-sets/3"
                            "title": "1er ticket",
                            "price": 5.00,
                            "stock": 20,
                            "event": {
                              "id": 14,
                              "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/14"
                            }
                          }
                        ]
                      }
          post:
            is: [has_validation_error]
            description: Creates a new ticket set.
            body:
              application/json:
                example: |
                  {
                    "title": "5er group ticket for a team",
                    "price": 25.30,
                    "stock": 20
                  }
            responses:
              201:
                description: Ticket set has been successfully created.
                headers:
                  Location:
                    example: "Location: http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/14/ticket-sets/2"

          /{ticketSetId}:
            is: [authorized, has_resource_not_found]
            get:
              is: [expandable]
              description: Returns a Ticket Set
              body:
                application/json:
                  example: |
                    {
                      "id": 2,
                      "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/14/ticket-sets/2"
                      "title": "5er group ticket for a team",
                      "price": 25.00,
                      "stock": 20,
                      "event": {
                        "id": 14,
                        "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/14"
                      }
                    }
            delete:
              description: Deletes a ticket set.
              responses:
                204:
                  description: Ticket set has been successfully deleted.
            put: 
              is: [has_validation_error]
              description: Updates a ticket set.
              body:
                application/json:
                  example: |
                    {
                      "title": "5er Group Ticket",
                      "price": 25.30,
                      "stock": 50
                    }
              responses:
                204:
                  description: Ticket set has been successfully updated.

/buyers:

  # post:
  #   is: [has_validation_error]
  #   description: Creates a new User.
  #   body:
  #     application/json:
  #       example: |
  #         {
  #           "email"    : "user@example.com",
  #           "password" : "123456789"
  #         }
  #   responses:
  #     201:
  #       description: User successfully registered.
  #       headers:
  #         Location:
  #           description: Location of the newly created user
  #           example: "Location: http://localhost/api/users/27a4563a45ab4a7aacd15af9"
  #     409:
  #       description: There is a conflict due to duplicated email.

  /{buyerId}:
    is: [authorized, has_resource_not_found]
    uriParameters:
      buyerId:
        description: UUID that uniquely identifies the buyer in the system.
        type: string
    get:
      description: Returns a buyer. 
      responses:
        200:
          body:
            application/json:
              example: |
                {
                  "id": "103d34a8-1420-74e9-153d-7a35e1ea8619",
                  "href": "http://example.com/api/users/103d34a8-1420-74e9-153d-7a35e1ea8619",
                  "email": "user@example.com",
                  "basket": {
                    "href": "http://example.com/api/users/103d34a8-1420-74e9-153d-7a35e1ea8619/basket"
                  }
                }

    /basket:
      is: [authorized, has_resource_not_found]
      get:   
        description: Returns the basket belonging to a buyer. [FINISHED]
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "href": "http://example.com/api/buyers/103d44a8-1240-49e9-935d-7a35e5ea6819/basket",
                    "buyer": {
                      "href": "http://example.com/api/buyers/103d44a8-1240-49e9-935d-7a35e5ea6819"
                    },
                    "items": {
                      "href": "http://example.com/api/buyers/103d44a8-1240-49e9-935d-7a35e5ea6819/basket/items",
                      "items": [
                        {
                          "id": 1,
                          "href": "http://example.com/api/buyers/103d44a8-1240-49e9-935d-7a35e5ea6819/basket/items/1",
                          "quantity": 2,
                          "ticketSet" {
                            "id": 5,
                            "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/14/ticket-sets/5"
                          }
                        },
                        {
                          "id": 2,
                          "href": "http://example.com/api/buyers/103d44a8-1240-49e9-935d-7a35e5ea6819/basket/items/2",
                          "quantity": 1,
                          "ticketSet" {
                            "id": 9,
                            "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/20/ticket-sets/9"
                          }
                        }
                      ]
                    }
                  }

      /items:
        is: [authorized, has_resource_not_found]
        # get:
        #   description: Returns Basket Items Collection
        #   responses:
        #     200:
        #       body:
        #         application/json:
        #           example: |
        #             {
        #               "href": "http://example.com/api/buyers/103d44a8-1240-49e9-935d-7a35e5ea6819/basket/items"
        #               "items": [
        #                 {
        #                   "id": 1,
        #                   "href": "http://example.com/api/buyers/103d44a8-1240-49e9-935d-7a35e5ea6819/basket/items/1",
        #                   "quantity": 2,
        #                   "unitPrice": 20.5,
        #                   "ticketSet" {
        #                     "id": 5,
        #                     "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/14/ticket-sets/5"
        #                   }
        #                 },
        #                 {
        #                   "id": 2,
        #                   "href": "http://example.com/api/buyers/103d44a8-1240-49e9-935d-7a35e5ea6819/basket/items/2",
        #                   "quantity": 1,
        #                   "unitPrice": 20.5,
        #                   "ticketSet" {
        #                     "id": 9,
        #                     "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/20/ticket-sets/9"
        #                   }
        #                 }
        #               ]
        #             }
        post:
          description: Adds a new item to the basket. [FINISHED]
          body:
            application/json:
              example: |
                {
                  "quantity": 20,
                  "ticketSetId": "25"
                }
          responses:
            201:
              description: Item has been successfully added to basket.
              headers:
                Location:
                  example: "Location: http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/basket/items/123"
            400:
              description: |
                Error has occurred while creating new basket item. This could be due to one of the following reasons:
                  - Validation errors
                  - Ticket set is not available for purchase (out of stock)

                Error codes: [VALIDATION_ERROR, TICKET_SET_OUT_OF_STOCK] # TODO TICKET_SET_OUT_OF_STOCK
                
              body:
                application/json:
                  example: |
                    {
                      "errorCode": "TICKET_SET_OUT_OF_STOCK"
                    }

        /{itemId}:
          is: [authorized, has_resource_not_found]
          get:
            description: Returns a Basket Item. [FINISHED]
            body:
              application/json:
                example: |
                  {
                    "id": 2,
                    "href": "http://example.com/api/buyers/103d44a8-1240-49e9-935d-7a35e5ea6819/basket/items/2",
                    "quantity": 1,
                    "unitPrice": "20.5",
                    "ticketSet" {
                      "id": 9,
                      "href": "http://example.com/api/users/103d44a8-1240-49e9-935d-7a35e5ea6819/events/20/ticket-sets/9"
                    }
                  }
          put:
            description: Updates a basket item. [FINISHED]
            body:
              application/json:
                example: |
                  {
                    "quantity": 2
                  }
            responses:
              204:
                description: Basket Item has been successfully updated.
              400:
                description: |
                  Error has occurred while creating new basket item. This could be due to one of the following reasons:
                    - Validation errors
                    - Ticket set is not available for purchase (out of stock)

                  Error codes: [VALIDATION_ERROR, TICKET_SET_OUT_OF_STOCK]
                  
                body:
                  application/json:
                    example: |
                      {
                        "errorCode": "TICKET_SET_OUT_OF_STOCK"
                      }
          delete:
            description: Deletes a Basket Item. [FINISHED]
            responses:
              204:
                description: Basket item has been successfully deleted.

          /refresh:
            # TODO
            put:
              description: Refresh the basket item to be consistent with the ticket set (same unit price). This request should be executed with empty body. 

/auth:
  /request-token:
    post:
      is: [auth_endpoint]
